# üéØ Thonburian Whisper + GPU Acceleration (Latest Version)
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Colab

# ========================================
# üîß ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies
# ========================================

# ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Colab:
"""
!pip install transformers torch librosa accelerate
!pip install flask flask-cors pyngrok
!pip install soundfile numpy
"""

# ========================================
# üéØ ‡πÇ‡∏´‡∏•‡∏î Thonburian Whisper Model
# ========================================

from transformers import pipeline
import torch

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ device
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"üéØ ‡πÉ‡∏ä‡πâ Device: {device}")

# ‡πÇ‡∏´‡∏•‡∏î Thonburian Whisper
MODEL_NAME = "biodatlab/whisper-th-medium-combined"
print(f"üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î {MODEL_NAME}...")

pipe = pipeline(
    task="automatic-speech-recognition",
    model=MODEL_NAME,
    chunk_length_s=30,
    device=device,
)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ decoder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
pipe.model.config.forced_decoder_ids = pipe.tokenizer.get_decoder_prompt_ids(
    language="th",
    task="transcribe"
)

print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î Thonburian Whisper ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
print(f"üéØ WER: 7.42% (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)")
print(f"‚ö° Device: {device}")

# ========================================
# üåê ‡∏™‡∏£‡πâ‡∏≤‡∏á API Endpoint (Updated Version)
# ========================================

from flask import Flask, request, jsonify
from flask_cors import CORS
import base64
import time
import os
import io
import wave
import numpy as np
import librosa
import soundfile as sf

app = Flask(__name__)
CORS(app)

def validate_and_fix_audio_file(file_path):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        if not os.path.exists(file_path):
            print(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö: {file_path}")
            return False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            print(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤: {file_path}")
            return False
        
        print(f"üìÅ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {file_size} bytes")
        
        # ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ librosa
        try:
            audio, sr = librosa.load(file_path, sr=16000)
            print(f"üéµ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(audio)} samples, {sr}Hz")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
            if len(audio) == 0:
                print(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤: {file_path}")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            if np.max(np.abs(audio)) < 0.01:
                print(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: {file_path}")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå: {e}")
        return False

@app.route('/transcribe', methods=['POST'])
def transcribe_api():
    """API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
    
    try:
        # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        data = request.get_json()
        audio_base64 = data.get('audio')
        user_id = data.get('user_id', 'unknown')
        
        if not audio_base64:
            return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á"}), 400
        
        print(f"üé§ ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å user: {user_id}")
        start_time = time.time()
        
        # ‡πÅ‡∏õ‡∏•‡∏á base64 ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
        audio_data = base64.b64decode(audio_base64)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if len(audio_data) == 0:
            return jsonify({"error": "‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤"}), 400
        
        print(f"üìä ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {len(audio_data)} bytes")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå WAV ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        temp_file = f"temp_audio_{user_id}.wav"
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô WAV header ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if audio_data[:4] == b'RIFF':
            # ‡πÄ‡∏õ‡πá‡∏ô WAV ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            with open(temp_file, "wb") as f:
                f.write(audio_data)
            print(f"‚úÖ ‡πÑ‡∏ü‡∏•‡πå WAV ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            # ‡πÄ‡∏õ‡πá‡∏ô raw PCM - ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô WAV
            print(f"üîÑ ‡πÅ‡∏õ‡∏•‡∏á raw PCM ‡πÄ‡∏õ‡πá‡∏ô WAV...")
            
            # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 16-bit PCM, 48kHz, stereo
            sample_rate = 48000
            channels = 2
            sample_width = 2  # 16-bit = 2 bytes
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á WAV file
            with wave.open(temp_file, 'wb') as wav_file:
                wav_file.setnchannels(channels)
                wav_file.setsampwidth(sample_width)
                wav_file.setframerate(sample_rate)
                wav_file.writeframes(audio_data)
            print(f"‚úÖ ‡πÅ‡∏õ‡∏•‡∏á PCM ‡πÄ‡∏õ‡πá‡∏ô WAV ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå WAV: {temp_file}")
        print(f"üìä ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {len(audio_data)} bytes")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        if not validate_and_fix_audio_file(temp_file):
            return jsonify({"error": "‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢"}), 400
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ Thonburian Whisper
        result = pipe(temp_file)
        transcript = result["text"].strip()
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤
        duration = time.time() - start_time
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        try:
            os.remove(temp_file)
            print(f"üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: {temp_file}")
        except:
            pass
        
        print(f"‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à: {duration:.2f}s - {transcript[:50]}...")
        
        return jsonify({
            "transcript": transcript,
            "language": "th",
            "duration": duration,
            "user_id": user_id,
            "wer": 7.42,
            "device": device
        })
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        try:
            if 'temp_file' in locals():
                os.remove(temp_file)
        except:
            pass
            
        return jsonify({"error": str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({"status": "healthy", "model": "thonburian-whisper"})

print("üîß API ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß!")
print("üìù POST /transcribe - ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö WAV ‡πÅ‡∏•‡∏∞ PCM)")
print("üîç GET /health - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")

# ========================================
# üåê ‡πÄ‡∏õ‡∏¥‡∏î ngrok tunnel
# ========================================

from pyngrok import ngrok

# ‡πÄ‡∏õ‡∏¥‡∏î tunnel
public_url = ngrok.connect(5000)
print(f"üåê Public URL: {public_url}")

# ‡∏£‡∏±‡∏ô Flask app
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)

# ========================================
# üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
# ========================================

"""
### üéØ Thonburian Whisper:
- Model: biodatlab/whisper-th-medium-combined
- WER: 7.42% (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
- ‡∏Ç‡∏ô‡∏≤‡∏î: 817M parameters
- ‡∏†‡∏≤‡∏©‡∏≤: ‡πÑ‡∏ó‡∏¢‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞

### ‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß:
- Local CPU: 10-15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
- Colab GPU: 1-2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (5-10x ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô!)

### üîß ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:
- ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö WAV ‡πÅ‡∏•‡∏∞ PCM ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
- ‚úÖ Error handling ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
- ‚úÖ Dynamic timeout ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
- ‚úÖ ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ librosa
- ‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°

### üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
1. ‡πÄ‡∏õ‡∏¥‡∏î Google Colab
2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠ copy-paste ‡πÇ‡∏Ñ‡πâ‡∏î
3. ‡∏£‡∏±‡∏ô cell ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
4. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å ngrok URL
5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Discord Bot ‡πÉ‡∏ô src/colab-api.ts
6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

### üéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á:
üé§ ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å user: 414300827793227797
üìä ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: 1991723 bytes
‚úÖ ‡πÑ‡∏ü‡∏•‡πå WAV ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå WAV: temp_audio_414300827793227797.wav
üìÅ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: 1991723 bytes
üéµ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: 99586 samples, 16000Hz
‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à: 2.11s - ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏µ‡πà‡∏™‡∏¥‡∏ö‡πÄ‡∏Å‡πâ‡∏≤‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°...
üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: temp_audio_414300827793227797.wav
""" 