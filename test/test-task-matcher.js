// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Task Matching Algorithm
const { matchTasksWithSpeech, extractKeywordsFromSpeech } = require('../dist/task-matcher.js');

// Sample tasks ‡∏à‡∏≤‡∏Å ClickUp ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
const SAMPLE_TASKS = [
  {
    id: '86b5y86vn',
    name: 'User Authentication System',
    description: 'Implement complete user authentication with login, register, and logout functionality',
    url: 'https://app.clickup.com/t/86b5y86vn'
  },
  {
    id: '86b5y86y2',
    name: 'Login Feature Implementation',
    description: 'Create login form and authentication logic for user access',
    url: 'https://app.clickup.com/t/86b5y86y2'
  },
  {
    id: '86b5y8707',
    name: 'Database Integration',
    description: 'Setup database connection and create user models and queries',
    url: 'https://app.clickup.com/t/86b5y8707'
  },
  {
    id: '86b5y8729',
    name: 'API Endpoint Development',
    description: 'Build REST API endpoints for user management and data access',
    url: 'https://app.clickup.com/t/86b5y8729'
  },
  {
    id: '86b5y873z',
    name: 'Frontend Dashboard',
    description: 'Create user dashboard with profile management and settings',
    url: 'https://app.clickup.com/t/86b5y873z'
  }
];

// Test cases ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡πÉ‡∏ô Daily Standup
const TEST_SPEECHES = [
  "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥ user auth ‡∏Ñ‡∏£‡∏±‡∏ö",
  "login feature ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß",
  "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ó‡∏≥ database ‡πÄ‡∏™‡∏£‡πá‡∏à",
  "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ api endpoint ‡∏≠‡∏¢‡∏π‡πà",
  "dashboard ‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö",
  "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥ authentication system",
  "‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏±‡∏ö database connection",
  "unit test ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß",
  "‡∏à‡∏∞ deploy api ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
];

function testTaskMatching() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Task Matching Algorithm\n');
  
  TEST_SPEECHES.forEach((speech, index) => {
    console.log(`\nüìã Test Case ${index + 1}: "${speech}"`);
    console.log('=' .repeat(50));
    
    // Extract keywords
    const keywords = extractKeywordsFromSpeech(speech);
    console.log(`üîç Keywords ‡∏ó‡∏µ‡πà‡∏û‡∏ö: [${keywords.join(', ')}]`);
    
    // Match with tasks
    const result = matchTasksWithSpeech(speech, SAMPLE_TASKS);
    console.log(`üåê ‡∏†‡∏≤‡∏©‡∏≤: ${result.language}`);
    console.log(`üìù Keywords ‡∏™‡∏Å‡∏±‡∏î: [${result.extractedKeywords.join(', ')}]`);
    
    if (result.matches.length > 0) {
      console.log(`\nüéØ Top Matches:`);
      result.matches.forEach((match, i) => {
        console.log(`   ${i + 1}. ${match.taskName}`);
        console.log(`      Score: ${(match.matchScore * 100).toFixed(1)}% (${match.confidence})`);
        console.log(`      Keywords: [${match.matchedKeywords.join(', ')}]`);
        console.log(`      URL: ${match.taskUrl}`);
      });
    } else {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Task ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
    }
  });
  
  // Summary
  console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
  console.log('=' .repeat(50));
  
  let totalMatches = 0;
  let highConfidenceMatches = 0;
  
  TEST_SPEECHES.forEach(speech => {
    const result = matchTasksWithSpeech(speech, SAMPLE_TASKS);
    if (result.matches.length > 0) {
      totalMatches++;
      if (result.matches[0].confidence === 'high') {
        highConfidenceMatches++;
      }
    }
  });
  
  console.log(`‚úÖ Total test cases: ${TEST_SPEECHES.length}`);
  console.log(`üéØ Cases with matches: ${totalMatches}/${TEST_SPEECHES.length} (${(totalMatches/TEST_SPEECHES.length*100).toFixed(1)}%)`);
  console.log(`üî• High confidence matches: ${highConfidenceMatches}/${totalMatches} (${totalMatches > 0 ? (highConfidenceMatches/totalMatches*100).toFixed(1) : 0}%)`);
  
  console.log('\nüöÄ Task Matching Algorithm ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
if (require.main === module) {
  testTaskMatching();
}

module.exports = { testTaskMatching, SAMPLE_TASKS, TEST_SPEECHES };