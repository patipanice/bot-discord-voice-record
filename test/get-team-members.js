// ‡∏™‡∏£‡πâ‡∏≤‡∏á user-mapping.json ‡πÇ‡∏î‡∏¢‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Team Members ‡∏à‡∏≤‡∏Å ClickUp
const axios = require('axios');
const fs = require('fs');
require('dotenv').config();

async function getTeamMembers() {
  console.log('üë• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Team Members ‡∏à‡∏≤‡∏Å ClickUp...\n');
  
  const apiToken = process.env.CLICKUP_API_TOKEN;
  const teamId = process.env.CLICKUP_TEAM_ID;
  
  if (!apiToken || !teamId) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö CLICKUP_API_TOKEN ‡∏´‡∏£‡∏∑‡∏≠ CLICKUP_TEAM_ID ‡πÉ‡∏ô .env file');
    return;
  }

  const client = axios.create({
    baseURL: 'https://api.clickup.com/api/v2',
    headers: {
      'Authorization': apiToken,
      'Content-Type': 'application/json'
    },
    timeout: 15000
  });

  try {
    // Method 1: ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å /team endpoint
    console.log('üìã Method 1: ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å /team endpoint...');
    const teamResponse = await client.get('/team');
    const teams = teamResponse.data.teams;
    const targetTeam = teams.find(team => team.id === teamId);
    
    if (targetTeam && targetTeam.members) {
      console.log(`‚úÖ ‡∏û‡∏ö team: ${targetTeam.name}`);
      console.log(`üë• Members ‡∏à‡∏≤‡∏Å /team:`);
      
      targetTeam.members.forEach((member, index) => {
        console.log(`   ${index + 1}. ${member.username || 'N/A'}`);
        console.log(`      ID: ${member.id || 'N/A'}`);
        console.log(`      Email: ${member.email || 'N/A'}`);
        console.log(`      Role: ${member.role || 'N/A'}\n`);
      });
    }

    // Method 2: ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å workspace members
    console.log('üìã Method 2: ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å workspace members...');
    try {
      const spacesResponse = await client.get(`/team/${teamId}/space`);
      const spaces = spacesResponse.data.spaces;
      
      if (spaces.length > 0) {
        const spaceId = spaces[0].id;
        console.log(`üìÅ ‡πÉ‡∏ä‡πâ space: ${spaces[0].name} (${spaceId})`);
        
        // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á members ‡∏à‡∏≤‡∏Å space
        const spaceResponse = await client.get(`/space/${spaceId}`);
        const spaceData = spaceResponse.data;
        
        if (spaceData.members) {
          console.log(`‚úÖ Members ‡∏à‡∏≤‡∏Å space:`);
          spaceData.members.forEach((member, index) => {
            console.log(`   ${index + 1}. ${member.username || 'N/A'}`);
            console.log(`      ID: ${member.id || 'N/A'}`);
            console.log(`      Email: ${member.email || 'N/A'}\n`);
          });
        }
      }
    } catch (spaceError) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å space members');
    }

    // Method 3: ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å current user
    console.log('üìã Method 3: Current user info...');
    const userResponse = await client.get('/user');
    const currentUser = userResponse.data.user;
    
    console.log(`‚úÖ Current User:`);
    console.log(`   Username: ${currentUser.username}`);
    console.log(`   ID: ${currentUser.id}`);
    console.log(`   Email: ${currentUser.email}`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á template user-mapping.json
    console.log('\nüìù ‡∏™‡∏£‡πâ‡∏≤‡∏á template user-mapping.json...');
    
    const userMappingTemplate = {
      "251733361926733841": "your-email@domain.com",
      "414300827793227797": "friend-email@domain.com",
      "_comment": "Discord User ID ‚Üí ClickUp Email mapping",
      "_instructions": [
        "1. ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà your-email@domain.com ‡∏î‡πâ‡∏ß‡∏¢ ClickUp email ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        "2. ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà friend-email@domain.com ‡∏î‡πâ‡∏ß‡∏¢ ClickUp email ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô",
        "3. ‡∏•‡∏ö _comment ‡πÅ‡∏•‡∏∞ _instructions ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à"
      ],
      "_discovered_users": {
        [`${currentUser.id}`]: currentUser.email
      }
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    fs.writeFileSync('config/user-mapping.json', JSON.stringify(userMappingTemplate, null, 2));
    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á config/user-mapping.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!');
    
    console.log('\nüéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:');
    console.log('1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå config/user-mapping.json');
    console.log('2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç email addresses ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    console.log('3. ‡∏•‡∏ö _comment ‡πÅ‡∏•‡∏∞ _instructions');
    console.log('4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Discord bot');

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á mapping ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
    console.log('\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á mapping ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô:');
    console.log('{');
    console.log('  "251733361926733841": "‡∏Ñ‡∏∏‡∏ì@email.com",');
    console.log('  "414300827793227797": "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô@email.com"');
    console.log('}');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    if (error.response) {
      console.error(`üìä Status: ${error.response.status}`);
      console.error(`üìÑ Response: ${JSON.stringify(error.response.data, null, 2)}`);
    }
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
if (require.main === module) {
  getTeamMembers();
}

module.exports = { getTeamMembers };