// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ClickUp API connection
const axios = require('axios');
require('dotenv').config();

async function testClickUpAPI() {
  console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ClickUp API...\n');
  
  const apiToken = process.env.CLICKUP_API_TOKEN;
  const teamId = process.env.CLICKUP_TEAM_ID;
  
  console.log(`üîë API Token: ${apiToken ? apiToken.substring(0, 20) + '...' : '‡πÑ‡∏°‡πà‡∏û‡∏ö'}`);
  console.log(`üè¢ Team ID: ${teamId || '‡πÑ‡∏°‡πà‡∏û‡∏ö'}\n`);
  
  if (!apiToken || !teamId) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö CLICKUP_API_TOKEN ‡∏´‡∏£‡∏∑‡∏≠ CLICKUP_TEAM_ID ‡πÉ‡∏ô .env file');
    return;
  }

  const client = axios.create({
    baseURL: 'https://api.clickup.com/api/v2',
    headers: {
      'Authorization': apiToken,
      'Content-Type': 'application/json'
    },
    timeout: 15000
  });

  try {
    // Test 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö authentication
    console.log('üìã Test 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö authentication...');
    const userResponse = await client.get('/user');
    
    console.log(`‚úÖ Authentication ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${userResponse.data.user.username}`);
    console.log(`üìß Email: ${userResponse.data.user.email}\n`);

    // Test 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö team access
    console.log('üè¢ Test 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö team access...');
    const teamResponse = await client.get('/team');

    const teams = teamResponse.data.teams;
    const targetTeam = teams.find(team => team.id === teamId);
    
    if (targetTeam) {
      console.log(`‚úÖ ‡∏û‡∏ö team: ${targetTeam.name}`);
      console.log(`üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${targetTeam.members?.length || 0} ‡∏Ñ‡∏ô\n`);
    } else {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö team ID: ${teamId}`);
      console.log('üìã Teams ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ:');
      teams.forEach(team => {
        console.log(`   - ${team.name} (ID: ${team.id})`);
      });
      return;
    }

    // Test 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á spaces
    console.log('üìÅ Test 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á spaces...');
    const spacesResponse = await client.get(`/team/${teamId}/space`);

    const spaces = spacesResponse.data.spaces;
    console.log(`‚úÖ ‡∏û‡∏ö ${spaces.length} spaces:`);
    spaces.forEach((space, index) => {
      console.log(`   ${index + 1}. ${space.name} (ID: ${space.id})`);
    });

    // Test 4: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ tasks
    console.log('\nüìù Test 4: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ tasks...');
    const tasksResponse = await client.get(`/team/${teamId}/task`, {
      params: {
        page: 0,
        order_by: 'updated',
        reverse: true,
        subtasks: true,
        include_closed: false
      }
    });

    const tasks = tasksResponse.data.tasks;
    console.log(`‚úÖ ‡∏û‡∏ö ${tasks.length} tasks:`);
    
    if (tasks.length > 0) {
      console.log('\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á tasks:');
      tasks.slice(0, 5).forEach((task, index) => {
        console.log(`   ${index + 1}. ${task.name}`);
        console.log(`      ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${task.status.status}`);
        console.log(`      Assignees: ${task.assignees.map(a => a.username).join(', ') || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
        console.log(`      URL: ${task.url}\n`);
      });
    }

    console.log('üéâ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ClickUp API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!');
    console.log('‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Discord bot integration ‡πÅ‡∏•‡πâ‡∏ß');

    return {
      success: true,
      user: userResponse.data.user,
      team: targetTeam,
      spaces,
      tasks
    };

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    if (error.response) {
      console.error(`üìä Status: ${error.response.status}`);
      console.error(`üìÑ Response: ${JSON.stringify(error.response.data, null, 2)}`);
    }
    return { success: false, error: error.message };
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
if (require.main === module) {
  testClickUpAPI();
}

module.exports = { testClickUpAPI };