import { spawn } from 'child_process'
import { convertPcmToWav } from './converter'
import { readFileSync, existsSync, statSync } from 'fs'

export interface TranscriptionResult {
  userId: string
  transcript: string
  confidence: number
  timestamp: string
  language: string
  segments: Array<{
    start: number
    end: number
    text: string
    avg_logprob: number
  }>
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
function validateAudioFile(filePath: string): boolean {
  try {
    if (!existsSync(filePath)) {
      console.log(`‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö: ${filePath}`)
      return false
    }
    
    const stats = statSync(filePath)
    if (stats.size === 0) {
      console.log(`‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤: ${filePath}`)
      return false
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1KB)
    if (stats.size < 1024) {
      console.log(`‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: ${filePath} (${stats.size} bytes)`)
      return false
    }
    
    console.log(`‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${filePath} (${stats.size} bytes)`)
    return true
  } catch (error) {
    console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${error}`)
    return false
  }
}

export async function transcribeAudio(pcmFilePath: string, userId: string): Promise<TranscriptionResult | null> {
  try {
    console.log(`üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå PCM ‡πÄ‡∏õ‡πá‡∏ô WAV...`)
    const wavFilePath = pcmFilePath.replace('.pcm', '.wav')
    await convertPcmToWav(pcmFilePath, wavFilePath)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå WAV ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á
    if (!validateAudioFile(wavFilePath)) {
      console.log(`‚ùå ‡πÑ‡∏ü‡∏•‡πå WAV ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${wavFilePath}`)
      return null
    }
    
    console.log(`üéØ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Whisper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå ${wavFilePath}...`)
    const result = await runWhisperWithRetry(wavFilePath, 3)
    
    if (result && result.transcript && result.transcript.trim()) {
      return {
        userId,
        transcript: result.transcript.trim(),
        confidence: result.confidence || 0.95,
        timestamp: new Date().toISOString(),
        language: 'th',
        segments: result.segments || []
      }
    } else {
      console.log(`‚ö†Ô∏è Whisper ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏á‡∏µ‡∏¢‡∏ö)`)
      return null
    }
  } catch (error) {
    console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${error}`)
    return null
  }
}

async function runWhisperWithRetry(wavFilePath: string, maxRetries: number): Promise<any> {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üêç ‡πÄ‡∏£‡∏¥‡πà‡∏° Python Whisper script (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${attempt}/${maxRetries})...`)
      
      return new Promise((resolve, reject) => {
        const pythonProcess = spawn('python3', ['whisper_transcribe.py', wavFilePath])
        
        let stdout = ''
        let stderr = ''
        
        pythonProcess.stdout.on('data', (data) => {
          stdout += data.toString()
        })
        
        pythonProcess.stderr.on('data', (data) => {
          stderr += data.toString()
        })
        
        pythonProcess.on('close', (code) => {
          console.log(`üêç Python Whisper ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (exit code: ${code})`)
          
          if (code === 0) {
            try {
              const result = JSON.parse(stdout)
              resolve(result)
            } catch (parseError) {
              console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏î‡πâ: ${parseError}`)
              reject(new Error(`Whisper failed with code ${code}: ${stderr}`))
            }
          } else {
            console.error(`‚ùå Whisper failed: ${stderr}`)
            reject(new Error(`Whisper failed with code ${code}: ${stderr}`))
          }
        })
        
        pythonProcess.on('error', (error) => {
          console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Python: ${error}`)
          reject(error)
        })
      })
    } catch (error) {
      console.error(`‚ùå Whisper ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${attempt} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error}`)
      
      if (attempt < maxRetries) {
        const delay = attempt * 1000 // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á
        console.log(`‚è≥ ‡∏£‡∏≠ ${delay}ms ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...`)
        await new Promise(resolve => setTimeout(resolve, delay))
      } else {
        console.error(`‚ùå Whisper ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${maxRetries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`)
        throw error
      }
    }
  }
  
  return null
} 