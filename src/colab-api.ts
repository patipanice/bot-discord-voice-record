import axios from 'axios'
import { readFileSync, writeFileSync, unlinkSync } from 'fs'
import { TranscriptionResult } from './transcriber'

// ‡πÉ‡∏™‡πà URL ‡∏à‡∏≤‡∏Å ngrok ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Colab
const COLAB_API_URL = process.env.COLAB_API_URL // ‚úÖ URL ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å ngrok

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
function getAudioFileSize(audioBuffer: Buffer): number {
    return audioBuffer.length
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì timeout ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
function calculateTimeout(fileSize: number): number {
    // ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å (< 1MB): 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    if (fileSize < 1024 * 1024) {
        return 30000
    }
    // ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á (1-10MB): 2 ‡∏ô‡∏≤‡∏ó‡∏µ
    else if (fileSize < 10 * 1024 * 1024) {
        return 120000
    }
    // ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà (> 10MB): 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    else {
        return 300000
    }
}

export async function transcribeAudioWithColab(audioBuffer: Buffer, userId: string): Promise<TranscriptionResult | null> {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
        const fileSize = getAudioFileSize(audioBuffer)
        console.log(`üìÅ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${fileSize} bytes (${(fileSize / 1024 / 1024).toFixed(2)} MB)`)
        
        // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        if (fileSize === 0) {
            console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á Colab API`)
            return null
        }
        
        // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        if (fileSize < 1024) {
            console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Colab API (${fileSize} bytes)`)
            return null
        }
        
        console.log(`üöÄ ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏õ Colab API...`)
        
        // ‡πÅ‡∏õ‡∏•‡∏á Buffer ‡πÄ‡∏õ‡πá‡∏ô base64
        const audioBase64 = audioBuffer.toString('base64')
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì timeout ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
        const timeout = calculateTimeout(fileSize)
        console.log(`‚è±Ô∏è ‡∏ï‡∏±‡πâ‡∏á timeout: ${timeout}ms`)
        
        // ‡∏™‡πà‡∏á‡πÑ‡∏õ Colab API
        const response = await axios.post(`${COLAB_API_URL}/transcribe`, {
            audio: audioBase64,
            user_id: userId
        }, {
            timeout: timeout,
            maxContentLength: Infinity,
            maxBodyLength: Infinity,
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        })
        
        if (response.data && response.data.transcript) {
            console.log(`‚úÖ ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Colab: ${response.data.transcript}`)
            return {
                userId,
                transcript: response.data.transcript,
                confidence: response.data.confidence || 0.95,
                timestamp: new Date().toISOString(),
                language: 'th',
                segments: response.data.segments || []
            }
        } else {
            console.log(`‚ö†Ô∏è Colab API ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤`)
            return null
        }
    } catch (error: any) {
        if (error.response) {
            // Server error (500, 400, etc.)
            console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Colab API: ${error.message}`)
            console.error(`üìä Status: ${error.response.status}`)
            console.error(`üìÑ Response: ${JSON.stringify(error.response.data)}`)
        } else if (error.request) {
            // Network error (timeout, connection refused, etc.)
            console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Colab API: ${error.message}`)
        } else {
            // Other error
            console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Colab API: ${error.message}`)
        }
        return null
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏° (local fallback)
async function transcribeAudioLocal(audioBuffer: Buffer, userId: string): Promise<TranscriptionResult | null> {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
    if (audioBuffer.length === 0) {
        console.log('‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á')
        return null
    }
    
    // ‡πÉ‡∏ä‡πâ local Whisper
    const { transcribeAudio } = await import('./transcriber')
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    const tempFile = `recordings/temp_${userId}-${Date.now()}.wav`
    writeFileSync(tempFile, audioBuffer)
    
    try {
        const result = await transcribeAudio(tempFile, userId)
        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        unlinkSync(tempFile)
        return result
    } catch (error) {
        console.error('‚ùå Local Whisper error:', error)
        return null
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API
export async function checkColabAPIHealth(): Promise<boolean> {
    try {
        const response = await axios.get(`${COLAB_API_URL}/health`, {
            timeout: 10000 // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        })
        
        const data = response.data
        console.log(`üîç Colab API Status: ${data.status}`)
        console.log(`üéØ Model: ${data.model}`)
        console.log(`‚ö° Device: ${data.device}`)
        console.log(`üéØ WER: ${data.wer}%`)
        
        return data.status === 'healthy'
    } catch (error) {
        console.error('‚ùå Colab API ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á:', error)
        return false
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô retry mechanism ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
export async function transcribeWithRetry(audioBuffer: Buffer, userId: string, maxRetries = 3): Promise<TranscriptionResult | null> {
    for (let i = 0; i < maxRetries; i++) {
        try {
            console.log(`üîÑ ‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${i + 1}/${maxRetries}...`)
            return await transcribeAudioWithColab(audioBuffer, userId)
        } catch (error) {
            console.log(`‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${i + 1}/${maxRetries} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error}`)
            if (i === maxRetries - 1) {
                console.log('üîÑ ‡πÉ‡∏ä‡πâ local Whisper ‡πÅ‡∏ó‡∏ô')
                return await transcribeAudioLocal(audioBuffer, userId)
            }
            // ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (exponential backoff)
            const delay = Math.min(1000 * Math.pow(2, i), 10000) // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            console.log(`‚è≥ ‡∏£‡∏≠ ${delay}ms ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...`)
            await new Promise(resolve => setTimeout(resolve, delay))
        }
    }
    
    return null
} 