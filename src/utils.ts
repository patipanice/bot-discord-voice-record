import { Readable } from 'stream'
import prism from 'prism-media'
import { createWriteStream, writeFileSync, appendFileSync, readFileSync, unlinkSync } from 'fs'
import { transcribeAudio, TranscriptionResult } from './transcriber'
import { addSessionTranscript, incrementPendingTranscriptions, decrementPendingTranscriptions } from './bot'
import { transcribeAudioWithColab, checkColabAPIHealth } from './colab-api'
import { convertPcmToWav } from './converter'

export function saveUserAudioStream(userId: string, stream: Readable) {
  const decoder = new prism.opus.Decoder({
    frameSize: 960,
    channels: 2,
    rate: 48000
  })

  const filename = `recordings/${userId}-${Date.now()}.pcm`
  const output = createWriteStream(filename)

  console.log(`üé§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á ${userId}...`)
  stream.pipe(decoder).pipe(output)

  output.on('finish', async () => {
    console.log(`üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á ${userId} ‡∏ó‡∏µ‡πà ${filename}`)
    console.log(`üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå PCM ‡πÄ‡∏õ‡πá‡∏ô WAV...`)

    incrementPendingTranscriptions()

    try {
      // ‡πÅ‡∏õ‡∏•‡∏á PCM ‡πÄ‡∏õ‡πá‡∏ô WAV
      const wavFilename = filename.replace('.pcm', '.wav')
      await convertPcmToWav(filename, wavFilename)
      console.log(`‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå WAV ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${wavFilename}`)
      
      // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå WAV
      const audioBuffer = readFileSync(wavFilename)
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Colab API
      const isColabAvailable = await checkColabAPIHealth()
      
      let result: TranscriptionResult | null = null
      
      if (isColabAvailable) {
        // ‡πÉ‡∏ä‡πâ Colab API
        console.log(`üöÄ ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå WAV ‡πÑ‡∏õ Colab API...`)
        result = await transcribeAudioWithColab(audioBuffer, userId)
      } else {
        // ‡πÉ‡∏ä‡πâ local Whisper
        console.log('üîÑ ‡πÉ‡∏ä‡πâ local Whisper ‡πÅ‡∏ó‡∏ô...')
        result = await transcribeAudio(wavFilename, userId)
      }
      
      if (result) {
        console.log(`‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "${result.transcript}"`)
        saveTranscription(result)
        await addSessionTranscript(result.userId, result.transcript, result.confidence)
      } else {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ')
      }
      
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      try {
        unlinkSync(filename) // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå PCM
        unlinkSync(wavFilename) // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå WAV
        console.log(`üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏•‡πâ‡∏ß`)
      } catch (unlinkError) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß:', unlinkError)
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á:', error)
    } finally {
      decrementPendingTranscriptions()
    }
  })
}

export function saveTranscription(result: TranscriptionResult) {
  const transcriptFile = `recordings/transcripts.txt`
  const line = `[${result.timestamp}] ${result.userId}: ${result.transcript} (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: ${(result.confidence * 100).toFixed(1)}%)\n`
  
  appendFileSync(transcriptFile, line, 'utf8')
  console.log(`üìÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å transcript ‡∏•‡∏á‡πÉ‡∏ô ${transcriptFile}`)
}
