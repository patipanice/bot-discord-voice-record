import { Client, GatewayIntentBits, AttachmentBuilder, EmbedBuilder, TextChannel } from 'discord.js'
import * as dotenv from 'dotenv'
import { joinVoiceAndRecord, leaveVoiceChannel } from './recorder'
import { readFileSync, existsSync, writeFileSync } from 'fs'

dotenv.config()

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á userId ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
async function getUserDisplayName(userId: string, guild: any): Promise<string> {
  try {
    const member = await guild.members.fetch(userId)
    return member.displayName || member.user.username
  } catch (error) {
    return `User-${userId.slice(-4)}` // ‡πÉ‡∏ä‡πâ 4 ‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á userId
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
function formatTimestamp(timestamp: string): string {
  const date = new Date(timestamp)
  return date.toLocaleString('th-TH', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  })
}

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö channel ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
let transcriptChannel: TextChannel | null = null
let isRecording = false // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
let sessionTranscripts: Array<{userId: string, transcript: string, confidence: number, timestamp: string}> = [] // ‡πÄ‡∏Å‡πá‡∏ö transcripts ‡πÉ‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
let pendingTranscriptions = 0 // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î channel ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
function loadSavedChannel() {
  try {
    const savedChannelId = readFileSync('recordings/saved_channel.txt', 'utf8').trim()
    if (savedChannelId) {
      console.log(`üìÇ ‡πÇ‡∏´‡∏•‡∏î channel ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ: ${savedChannelId}`)
      return savedChannelId
    }
  } catch (error) {
    console.log(`üìÇ ‡πÑ‡∏°‡πà‡∏û‡∏ö channel ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ`)
  }
  return null
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å channel
function saveChannel(channelId: string) {
  try {
    writeFileSync('recordings/saved_channel.txt', channelId, 'utf8')
    console.log(`üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å channel: ${channelId}`)
  } catch (error) {
    console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å channel:`, error)
  }
}

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
})

client.once('ready', async () => {
  console.log(`‚úÖ Logged in as ${client.user?.tag}`)
  
  // ‡πÇ‡∏´‡∏•‡∏î channel ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
  const savedChannelId = loadSavedChannel()
  if (savedChannelId) {
    try {
      const channel = await client.channels.fetch(savedChannelId) as TextChannel
      if (channel && channel.type === 0) { // TextChannel type
        transcriptChannel = channel
        console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î channel ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ: ${channel.name}`)
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î channel ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ: ${savedChannelId}`)
    }
  }
})

client.on('messageCreate', async (message) => {
  if (message.content === '!join' && message.member?.voice.channel) {
    const channel = message.member.voice.channel
    if (channel.type === 2) { // VoiceChannel type
      if (!isRecording) {
        await joinVoiceAndRecord(channel)
        isRecording = true
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        if (transcriptChannel) {
          const embed = new EmbedBuilder()
            .setTitle('üéôÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á')
            .setDescription(`**${channel.name}**`)
            .addFields({
              name: 'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
              value: 'üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
              inline: true
            })
            .addFields({
              name: '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°',
              value: new Date().toLocaleString('th-TH'),
              inline: true
            })
            .setColor(0x00ff00)
            .setTimestamp()
            .setFooter({ 
              text: 'Voice Recorder Bot',
              iconURL: client.user?.displayAvatarURL()
            })

          await transcriptChannel.send({ embeds: [embed] })
        }
        
    message.reply('üìº ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß!')
      } else {
        message.reply('‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!')
      }
    } else {
      message.reply('‚ùå ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Voice Channel ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
    }
  }
  
  if (message.content === '!leave') {
    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: sessionTranscripts.length = ${sessionTranscripts.length}`)
    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: transcriptChannel = ${transcriptChannel ? transcriptChannel.name : 'null'}`)
    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: isRecording = ${isRecording}`)
    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: pendingTranscriptions = ${pendingTranscriptions}`)
    
    const left = leaveVoiceChannel()
    if (left) {
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      if (pendingTranscriptions > 0) {
        console.log(`‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à ${pendingTranscriptions} ‡πÑ‡∏ü‡∏•‡πå...`)
        message.reply('‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ...')
        
        // ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à
        while (pendingTranscriptions > 0) {
          await new Promise(resolve => setTimeout(resolve, 1000)) // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          console.log(`‚è≥ ‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà... pendingTranscriptions = ${pendingTranscriptions}`)
        }
        
        console.log(`‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!`)
      }
      
      // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à
      isRecording = false
      
      // ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
      console.log(`üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°...`)
      await sendSessionSummary()
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      if (transcriptChannel) {
        const embed = new EmbedBuilder()
          .setTitle('‚èπÔ∏è ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á')
          .setDescription('‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß')
          .addFields({
            name: 'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
            value: 'üî¥ ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
            inline: true
          })
          .addFields({
            name: '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏ö',
            value: new Date().toLocaleString('th-TH'),
            inline: true
          })
          .addFields({
            name: 'üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
            value: `${sessionTranscripts.length} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`,
            inline: true
          })
          .setColor(0xff0000)
          .setTimestamp()
          .setFooter({ 
            text: 'Voice Recorder Bot',
            iconURL: client.user?.displayAvatarURL()
          })

        await transcriptChannel.send({ embeds: [embed] })
      }
      
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
      sessionTranscripts = []
      pendingTranscriptions = 0
      
      message.reply('üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß!')
    } else {
      message.reply('‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á')
    }
  }
  
  if (message.content === '!transcript') {
    const transcriptFile = 'recordings/transcripts.txt'
    if (existsSync(transcriptFile)) {
      try {
        const transcriptContent = readFileSync(transcriptFile, 'utf8')
        if (transcriptContent.trim()) {
          // ‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô embed
          const lines = transcriptContent.trim().split('\n')
          const embed = new EmbedBuilder()
            .setTitle('üìù Voice Transcripts')
            .setDescription('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á')
            .setColor(0x00ff00) // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            .setTimestamp()
            .setFooter({ 
              text: 'Voice Recorder Bot ‚Ä¢ ' + new Date().toLocaleString('th-TH'),
              iconURL: client.user?.displayAvatarURL()
            })

          // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° transcripts ‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏û‡∏π‡∏î
          const groupedTranscripts = new Map<string, Array<{transcript: string, confidence: string, timestamp: string}>>()
          
          for (const line of lines) {
            if (line.trim()) {
              // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: [timestamp] userId: transcript (confidence)
              const match = line.match(/\[(.*?)\] (.*?): (.*?) \(‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: (.*?)%\)/)
              if (match) {
                const [, timestamp, userId, transcript, confidence] = match
                
                if (!groupedTranscripts.has(userId)) {
                  groupedTranscripts.set(userId, [])
                }
                groupedTranscripts.get(userId)!.push({
                  transcript,
                  confidence,
                  timestamp
                })
              }
            }
          }
          
          // ‡πÅ‡∏™‡∏î‡∏á transcripts ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏û‡∏π‡∏î
          for (const [userId, transcripts] of groupedTranscripts) {
            const displayName = await getUserDisplayName(userId, message.guild)
            const latestTranscript = transcripts[transcripts.length - 1] // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            const formattedTime = formatTimestamp(latestTranscript.timestamp)
            
            embed.addFields({
              name: `üé§ ${displayName} ‚Ä¢ ${formattedTime}`,
              value: `"${latestTranscript.transcript}"\n*‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: ${latestTranscript.confidence}%*`,
              inline: false
            })
          }

          message.reply({ embeds: [embed] })
        } else {
          message.reply('üìÑ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ transcripts ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ')
        }
      } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå transcript:', error)
        message.reply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå transcript')
      }
    } else {
      message.reply('üìÑ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå transcripts.txt')
    }
  }
  
  if (message.content === '!clear') {
    const transcriptFile = 'recordings/transcripts.txt'
    if (existsSync(transcriptFile)) {
      try {
        writeFileSync(transcriptFile, '', 'utf8')
        message.reply('üóëÔ∏è ‡∏•‡∏ö transcripts ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß!')
      } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå transcript:', error)
        message.reply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå transcript')
      }
    } else {
      message.reply('üìÑ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå transcripts.txt ‡πÉ‡∏´‡πâ‡∏•‡∏ö')
    }
  }
  
  if (message.content === '!setchannel') {
    if (message.channel.type === 0) { // TextChannel type
      transcriptChannel = message.channel as TextChannel
      saveChannel(message.channel.id) // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å channel ID
      message.reply(`‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ channel ${message.channel.name} ‡πÄ‡∏õ‡πá‡∏ô channel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á transcripts ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ)`)
      console.log(`üì§ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ transcriptChannel = ${message.channel.name}`)
    } else {
      message.reply('‚ùå ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Text Channel ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
    }
  }
  
  if (message.content === '!status') {
    const statusEmbed = new EmbedBuilder()
      .setTitle('üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö')
      .setColor(0x0099ff)
      .addFields({
        name: 'üéôÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
        value: isRecording ? 'üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' : 'üî¥ ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
        inline: true
      })
      .addFields({
        name: 'üì§ Channel ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤',
        value: transcriptChannel ? transcriptChannel.name : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤',
        inline: true
      })
      .addFields({
        name: 'üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô',
        value: `${sessionTranscripts.length} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`,
        inline: true
      })
      .addFields({
        name: '‚è≥ ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
        value: `${pendingTranscriptions} ‡πÑ‡∏ü‡∏•‡πå`,
        inline: true
      })
      .addFields({
        name: 'üíæ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
        value: transcriptChannel ? '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà)' : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤',
        inline: true
      })
      .setTimestamp()
      .setFooter({ 
        text: 'Voice Recorder Bot',
        iconURL: client.user?.displayAvatarURL()
      })
    
    message.reply({ embeds: [statusEmbed] })
  }
  
  if (message.content === '!help') {
    const helpMessage = `ü§ñ **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á Voice Recorder Bot:**

üìº **!join** - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
üëã **!leave** - ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
üìù **!transcript** - ‡πÅ‡∏™‡∏î‡∏á transcripts ‡πÅ‡∏ö‡∏ö embed ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
üóëÔ∏è **!clear** - ‡∏•‡∏ö transcripts ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
üì§ **!setchannel** - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ channel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á transcripts ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
üìä **!status** - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
‚ùì **!help** - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

üí° **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
1. ‡∏û‡∏¥‡∏°‡∏û‡πå \`!setchannel\` ‡πÉ‡∏ô channel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö transcripts
2. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Voice Channel
3. ‡∏û‡∏¥‡∏°‡∏û‡πå \`!join\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)
4. ‡∏û‡∏π‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏à‡∏∞‡∏™‡πà‡∏á transcripts ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
5. ‡∏û‡∏¥‡∏°‡∏û‡πå \`!leave\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)

üéØ **‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:**
‚Ä¢ üéôÔ∏è **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å** - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
‚Ä¢ üìù **‡πÄ‡∏Å‡πá‡∏ö Transcripts** - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
‚Ä¢ ‚èπÔ∏è **‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å** - ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‚Ä¢ üìä **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞** - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
‚Ä¢ üéØ **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥** - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`
    
    message.reply(helpMessage)
  }
})

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö transcript ‡πÉ‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
export async function addSessionTranscript(userId: string, transcript: string, confidence: number) {
  console.log(`üîç addSessionTranscript: isRecording = ${isRecording}`)
  console.log(`üîç addSessionTranscript: transcript = "${transcript}"`)
  
  if (isRecording) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ transcript ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingIndex = sessionTranscripts.findIndex(
      item => item.userId === userId && item.transcript === transcript
    )
    
    if (existingIndex === -1) {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ã‡πâ‡∏≥ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
      sessionTranscripts.push({
        userId,
        transcript,
        confidence,
        timestamp: new Date().toISOString()
      })
      console.log(`üìù ‡πÄ‡∏û‡∏¥‡πà‡∏° transcript ‡πÉ‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô: "${transcript}" (${(confidence * 100).toFixed(1)}%)`)
      console.log(`üìä sessionTranscripts.length = ${sessionTranscripts.length}`)
    } else {
      console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° transcript ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥: "${transcript}"`)
    }
  } else {
    console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° transcript ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ isRecording = false`)
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
export function incrementPendingTranscriptions() {
  pendingTranscriptions++
  console.log(`üìà ‡πÄ‡∏û‡∏¥‡πà‡∏° pendingTranscriptions = ${pendingTranscriptions}`)
}

export function decrementPendingTranscriptions() {
  if (pendingTranscriptions > 0) {
    pendingTranscriptions--
    console.log(`üìâ ‡∏•‡∏î pendingTranscriptions = ${pendingTranscriptions}`)
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á transcripts ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≠‡∏ô‡∏à‡∏ö
async function sendSessionSummary() {
  console.log(`üîç sendSessionSummary: transcriptChannel = ${transcriptChannel ? transcriptChannel.name : 'null'}`)
  console.log(`üîç sendSessionSummary: sessionTranscripts.length = ${sessionTranscripts.length}`)
  
  if (transcriptChannel && sessionTranscripts.length > 0) {
    try {
      console.log(`üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${sessionTranscripts.length} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`)
      
      const embed = new EmbedBuilder()
        .setTitle('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°')
        .setDescription(`**${sessionTranscripts.length}** ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ`)
        .setColor(0x0099ff)
        .setTimestamp()
        .setFooter({ 
          text: 'Voice Recorder Bot',
          iconURL: client.user?.displayAvatarURL()
        })

      // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° transcripts ‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏û‡∏π‡∏î
      const groupedTranscripts = new Map<string, Array<{transcript: string, confidence: number, timestamp: string}>>()
      
      for (const item of sessionTranscripts) {
        if (!groupedTranscripts.has(item.userId)) {
          groupedTranscripts.set(item.userId, [])
        }
        groupedTranscripts.get(item.userId)!.push({
          transcript: item.transcript,
          confidence: item.confidence,
          timestamp: item.timestamp
        })
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á transcripts ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏û‡∏π‡∏î
      let fieldCount = 0
      const maxFields = 20
      
      for (const [userId, transcripts] of groupedTranscripts) {
        if (fieldCount >= maxFields) break
        
        const displayName = await getUserDisplayName(userId, transcriptChannel.guild)
        const latestTranscript = transcripts[transcripts.length - 1] // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        
        console.log(`üìù ‡πÄ‡∏û‡∏¥‡πà‡∏° transcript: ${latestTranscript.transcript}`)
        const formattedTime = formatTimestamp(latestTranscript.timestamp)
        
        embed.addFields({
          name: `üé§ ${displayName} ‚Ä¢ ${formattedTime}`,
          value: `"${latestTranscript.transcript}"\n*‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: ${(latestTranscript.confidence * 100).toFixed(1)}%*`,
          inline: false
        })
        
        fieldCount++
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ transcripts ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 20
      if (sessionTranscripts.length > maxFields) {
        embed.addFields({
          name: 'üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
          value: `‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${sessionTranscripts.length - maxFields} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...`,
          inline: false
        })
      }

      await transcriptChannel.send({ embeds: [embed] })
      console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${transcriptChannel.name} (${sessionTranscripts.length} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)`)
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:', error)
    }
  } else {
    console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ: transcriptChannel=${!!transcriptChannel}, sessionTranscripts.length=${sessionTranscripts.length}`)
  }
}

client.login(process.env.DISCORD_TOKEN)
